function PlayerObject(a, e, b, c, d, f, g) {
    var h = Math.floor(0.15 * d);
    this.stage = a;
    this.particlesystem = e;
    this.vkey = "";
    this.vtime = null;
    this.playerfuel = 5;
    this.olddirection = this.playerdirection = 1;
    this.thrusters = !1;
    this.lefttrap = Math.floor(0.15 * d);
    this.righttrap = Math.floor(0.85 * d) - 84;
    this.tractor = 0;
    this.manattached = null;
    this.soundstate = "stop";
    this.weapon = "laser";
    this.invincible = 3;
    this.displayalpha = 0.16;
    this.thrustersound = new Howl({urls: ["resources/sounds/thrust.mp3"], loop: !0, volume: 0.25});
    this.turbomaintain =
        new Howl({urls: ["resources/sounds/turbomaintain.mp3"], loop: !0});
    this.turbosound = new Howl({urls: ["resources/sounds/turbo.mp3"], onend: function () {
        this.currentsound.stop();
        this.currentsound = this.turbomaintain;
        this.currentsound.play()
    }.bind(this)});
    this.currentsound = null;
    a = new PARTSYS.Field(0, 0, d, f);
    a.onFieldInfluenced = this.applyGravity.bind(this);
    this.gravitypos = new PARTSYS.Vector(0, 0);
    this.tractoremitter = new PARTSYS.Emitter;
    this.tractoremitter.x = 0;
    this.tractoremitter.y = 0;
    this.tractoremitter.area = {xanchor: 0,
        yanchor                        : 0, width: 50, height: 2, radius: 0};
    this.tractoremitter.density = {min: 1, max: 5};
    this.tractoremitter.angle = {min: 87, max: 93};
    this.tractoremitter.speed = {min: 1, max: 2};
    this.tractoremitter.rotation = 0;
    this.tractoremitter.particlerotation = {min: -1, max: 1};
    this.tractoremitter.bounded = {x: 7, y: 28, width: 50, height: 2, type: "die"};
    this.tractoremitter.maxparticles = 0;
    this.tractoremitter.dienoparticles = !1;
    this.tractoremitter.lockparticles = !0;
    this.tractoremitter.onCreateParticle = this.createTractorParticle.bind(this);
    this.tractoremitter.onUpdateParticles =
        this.updateParticles.bind(this);
    this.tractoremitter.onRemoveParticle = this.removeParticle.bind(this);
    this.particlesystem.addEmitter("playertractor", this.tractoremitter);
    this.thrusteremitter = new PARTSYS.Emitter;
    this.thrusteremitter.x = 0;
    this.thrusteremitter.y = 0;
    this.thrusteremitter.area = {xanchor: 0, yanchor: 0, width: 2, height: 12, radius: 0};
    this.thrusteremitter.density = {min: 1, max: 5};
    this.thrusteremitter.angle = {min: 177, max: 183};
    this.thrusteremitter.speed = {min: 3, max: 5};
    this.thrusteremitter.rotation = 0;
    this.thrusteremitter.particlerotation =
    {min: -1, max: 1};
    this.thrusteremitter.emitterfields = [a];
    this.thrusteremitter.bounded = {x: -32, y: 0, width: 32, height: 28, type: "die"};
    this.thrusteremitter.maxparticles = 0;
    this.thrusteremitter.dienoparticles = !1;
    this.thrusteremitter.lockparticles = !0;
    this.thrusteremitter.onCreateParticle = this.createThrusterParticle.bind(this);
    this.thrusteremitter.onUpdateParticles = this.updateParticles.bind(this);
    this.thrusteremitter.onRemoveParticle = this.removeParticle.bind(this);
    this.particlesystem.addEmitter("thrusters", this.thrusteremitter);
    GameObject.call(this, "ship.png", 84, 28, b, c, d, f, h, g);
    setTimeout(this.updateTexture.bind(this), 160)
}
PlayerObject.constructor = PlayerObject;
PlayerObject.prototype = Object.create(GameObject.prototype);
PlayerObject.prototype.cleanup = function () {
    this.currentsound && this.currentsound.stop();
    this.particlesystem.removeEmitter("playertractor");
    this.particlesystem.removeEmitter("thrusters")
};
PlayerObject.prototype.applyWell = function (a, e, b, c) {
    var d = 0, f = 0, d = e - a.position.x, f = b - a.position.y;
    a = c / Math.pow(d * d + f * f, 1.5);
    return new PARTSYS.Vector(d * a, f * a)
};
PlayerObject.prototype.applyGravity = function (a) {
    a.velocity.selfAdd(this.applyWell(a, this.gravitypos.x, this.gravitypos.y, 500))
};
PlayerObject.prototype.createTractorParticle = function (a) {
    var e = PIXI.Texture.fromFrame("tractoricle.png");
    a.sprite = new PIXI.Sprite(e, 32, 32);
    a.sprite.position.x = a.position.x;
    a.sprite.position.y = a.position.y;
    a.sprite.anchor.x = 0.5;
    a.sprite.anchor.y = 0.5;
    this.stage.addChild(a.sprite)
};
PlayerObject.prototype.createThrusterParticle = function (a) {
    var e = PIXI.Texture.fromFrame("explodicle.png");
    a.sprite = new PIXI.Sprite(e, 32, 32);
    a.sprite.position.x = a.position.x;
    a.sprite.position.y = a.position.y;
    a.sprite.anchor.x = 0.5;
    a.sprite.anchor.y = 0.5;
    this.stage.addChild(a.sprite)
};
PlayerObject.prototype.updateParticles = function (a, e) {
    var b, c;
    for (b = 0; b < e.length; b++)c = e[b], c.visible = !0, c.sprite.position.x = c.position.x, c.sprite.position.y = c.position.y, c.sprite.rotation = PARTSYS.degreesToRadians(c.angle)
};
PlayerObject.prototype.removeParticle = function (a) {
    this.stage.removeChild(a.sprite);
    a.sprite = null
};
PlayerObject.prototype.everySecond = function (a) {
    this.invincible = 0 < this.invincible ? this.invincible - 1 : 0;
    this.displayalpha = 1 - this.invincible / 3;
    this.thrusters ? (this.playerfuel -= 1, 1 > this.playerfuel && (this.playerfuel = 1, this.thrusters = !1)) : (this.playerfuel += 1, this.playerfuel > GameWorld.MAXPLAYERFUEL && (this.playerfuel = GameWorld.MAXPLAYERFUEL))
};
PlayerObject.prototype.updateSound = function () {
    0 === this.playerdirection ? this.currentsound && (this.currentsound.stop(), this.soundstate = "stop") : this.thrusters && 1 < this.playerfuel ? "turbo" !== this.soundstate && (this.soundstate = "turbo", this.currentsound && this.currentsound.stop(), this.currentsound = this.turbosound, this.currentsound.play()) : "thrust" !== this.soundstate && (this.soundstate = "thrust", this.currentsound && this.currentsound.stop(), this.currentsound = this.thrustersound, this.currentsound.play())
};
PlayerObject.prototype.updateTexture = function () {
    var a;
    a = PIXI.Texture.fromFrame(1 === (0 !== this.playerdirection ? this.playerdirection : this.olddirection) ? "ship_r.png" : "ship.png");
    this.setTexture(a);
    this.alpha = this.displayalpha;
    setTimeout(this.updateTexture.bind(this), 160)
};
PlayerObject.prototype.drawme = function (a) {
    var e, b = -1;
    this.visible = !1;
    this.position.y = this.worldy;
    !0 !== this.alwaysinvisible && (e = a + this.viewwidth, e > this.worldwidth && (b = e - this.worldwidth - 1), -1 === b ? this.worldx >= a - this.width && this.worldx <= e && (this.position.x = this.worldx - a, this.visible = !0) : this.worldx >= a - this.width && this.worldx <= this.worldwidth ? (this.position.x = this.worldx - a, this.visible = !0) : this.worldx <= b && (this.position.x = this.worldwidth - a + this.worldx, this.visible = !0), this.tractoremitter.x = this.position.x +
        17, this.tractoremitter.y = this.position.y + this.height, this.tractoremitter.bounded = this.tractor ? {x: this.position.x + 17, y: this.position.y + this.height, width: 50, height: this.height + this.tractor, type: "die"} : {x: this.position.x + 17, y: this.position.y + this.height, width: 50, height: 2, type: "die"}, this.thrusters && 1 < this.playerfuel ? (this.thrusteremitter.density = {min: 20, max: 30}, 1 === this.playerdirection ? (this.particlesystem.moveEmitter("thrusters",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.position.x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    this.position.y + 8), this.thrusteremitter.angle = {min: 177,
        max}, this.thrusteremitter.bounded = {x: this.position.x - 64, y: this.position.y, width: 64, height: this.height, type: "die"}, this.gravitypos.x = this.position.x - 64, this.gravitypos.y = this.position.y + 14) : -1 === this.playerdirection && (this.particlesystem.moveEmitter("thrusters",
this.position.x + this.width,
this.position.y + 8), this.thrusteremitter.angle = {min: 357, max: 3}, this.thrusteremitter.bounded = {x: this.position.x + this.width, y: this.position.y, width: 64, height: this.height, type: "die"}, this.gravitypos.x = this.position.x +
        this.width + 64, this.gravitypos.y = this.position.y + 14)) : (this.thrusteremitter.density = {min: 5, max: 10}, 1 === this.playerdirection ? (this.particlesystem.moveEmitter("thrusters",
                                                                                                                                                                                       this.position.x,
                                                                                                                                                                                       this.position.y + 8), this.thrusteremitter.angle = {min: 177, max: 183}, this.thrusteremitter.bounded = {x: this.position.x - 32, y: this.position.y, width: 32, height: this.height, type: "die"}, this.gravitypos.x = this.position.x - 32, this.gravitypos.y = this.position.y + 14) : -1 === this.playerdirection ? (this.particlesystem.moveEmitter("thrusters",
this.position.x + this.width,
this.position.y + 8), this.thrusteremitter.angle = {min: 357, max: 3}, this.thrusteremitter.bounded = {x: this.position.x + this.width, y: this.position.y, width: 32, height: this.height, type: "die"}, this.gravitypos.x = this.position.x + this.width + 32, this.gravitypos.y = this.position.y + 14) : this.thrusteremitter.density = {min: 0, max: 0}))
};
PlayerObject.prototype.update = function (a, e, b) {
    this.updateSound();
    var c, d, f;
    "up" === this.vkey ? (b = null === this.vtime ? -1.25 * b * PARTSYS.framerate : -((timeStamp() - this.vtime) / 10), this.vtime = timeStamp()) : "down" === this.vkey ? (b = null === this.vtime ? 1.25 * b * PARTSYS.framerate : (timeStamp() - this.vtime) / 10, this.vtime = timeStamp()) : (b = 0, this.vtime = null);
    this.worldy += b;
    0 > this.worldy && (this.worldy = 0);
    this.worldy > this.viewheight - this.height && (this.worldy = this.viewheight - this.height);
    f = 0 !== this.playerdirection ? this.playerdirection :
        this.olddirection;
    c = a + this.lefttrap;
    d = a + this.righttrap;
    c > this.worldwidth && (c -= this.worldwidth + 1);
    d > this.worldwidth && (d -= this.worldwidth + 1);
    b = 1 === f ? c : d;
    this.worldx += e;
    1 === f && this.worldx !== c ? this.worldx -= 0 !== e ? e : 5 : -1 === f && this.worldx !== d && (this.worldx -= 0 !== e ? e : -5);
    this.worldx > this.worldwidth && (this.worldx -= this.worldwidth + 1);
    0 > this.worldx && (this.worldx += this.worldwidth + 1);
    this.worldx < c && this.worldx > d && c > d ? this.worldx = b : this.worldx < c && this.worldx < d && c < d ? this.worldx = b : this.worldx > c && this.worldx > d && c <
        d && (this.worldx = b);
    Math.abs(this.worldx - b) < Math.abs(e) && (this.worldx = b);
    this.drawme(a)
};
PlayerObject.prototype.keyreleased = function (a) {
    if ("left" === a || "right" === a)this.thrusters = !1;
    "up" === a && "up" === this.vkey && (this.vkey = "");
    "down" === a && "down" === this.vkey && (this.vkey = "")
};
PlayerObject.prototype.keypressed = function (a) {
    "left" === a && (-1 === this.playerdirection && (this.thrusters = !0), this.olddirection = this.playerdirection = -1);
    "right" === a && (1 === this.playerdirection && (this.thrusters = !0), this.olddirection = this.playerdirection = 1);
    "enter" === a && (this.thrusters = !1, this.playerdirection = 0);
    "up" === a && "" === this.vkey && (this.vkey = "up");
    "down" === a && "" === this.vkey && (this.vkey = "down")
};
