function ExplodyCthing(a, d, c, b, g, e, k, l, m, h) {
    var f;
    f = -1;
    this.stage = a;
    this.worldwidth = b;
    this.worldheight = g;
    this.viewwidth = e;
    this.viewheight = k;
    this.worldx = l;
    this.worldy = m;
    this.muto = c;
    this.onDone = null;
    this.particlesystem = d;
    c = new PARTSYS.Field(0, 0, e, k);
    c.onFieldInfluenced = this.applyGravity.bind(this);
    a = new PARTSYS.Emitter;
    a.x = l;
    a.y = m;
    a.area = {xanchor: 0.5, yanchor: 0.5, width: 1, height: 1, radius: 10};
    a.density = {min: 250, max: 500};
    a.angle = {min: 0, max: 359};
    a.speed = {min: 1, max: 2};
    a.rotation = 0;
    a.particlerotation = {min: -1,
        max                  : 1};
    a.lifetime = {min: 30, max: 120};
    a.bounded = {x: -32, y: -128, width: e + 32, height: k + 160, type: "die"};
    a.maxparticles = 500;
    a.dienoparticles = !0;
    a.lockparticles = !0;
    a.emitterfields = [c];
    a.onCreateParticle = this.createParticle.bind(this);
    a.onUpdateParticles = this.updateParticles.bind(this);
    a.onRemoveParticle = this.removeParticle.bind(this);
    e = h + this.viewwidth;
    e > this.worldwidth && (f = e - this.worldwidth - 1);
    a.x = -1 === f ? this.worldx - h : this.worldx <= f ? this.worldwidth - h + this.worldx : this.worldx - h;
    this.x = a.x;
    h = this.particlesystem.getEmitterNames();
    for (f = 0; ;) {
        this.emittername = "aliensplode" + f;
        if (-1 === h.indexOf(this.emittername))break;
        f += 1
    }
    d.addEmitter(this.emittername, a)
}
ExplodyCthing.constructor = ExplodyCthing;
ExplodyCthing.prototype = Object.create(Object.prototype);
ExplodyCthing.prototype.createParticle = function (a) {
    var d;
    d = this.muto ? PIXI.Texture.fromFrame("explodicle.png") : PIXI.Texture.fromFrame("cthorticle.png");
    a.sprite = new PIXI.Sprite(d, 32, 32);
    a.sprite.position.x = a.position.x;
    a.sprite.position.y = a.position.y;
    a.sprite.anchor.x = 0.5;
    a.sprite.anchor.y = 0.5;
    this.stage.addChild(a.sprite)
};
ExplodyCthing.prototype.updateParticles = function (a, d) {
    var c, b;
    for (c = 0; c < d.length; c++)b = d[c], b.sprite.position.x = b.position.x, b.sprite.position.y = b.position.y, b.sprite.rotation = PARTSYS.degreesToRadians(b.angle)
};
ExplodyCthing.prototype.removeParticle = function (a) {
    this.stage.removeChild(a.sprite);
    a.sprite = null
};
ExplodyCthing.prototype.applyWell = function (a, d, c, b) {
    var g = 0, e = 0, g = d - a.position.x, e = c - a.position.y;
    a = b / Math.pow(g * g + e * e, 1.5);
    return new PARTSYS.Vector(g * a, e * a)
};
ExplodyCthing.prototype.applyGravity = function (a) {
    a.velocity.selfAdd(this.applyWell(a, 400, 1E3, 1E4))
};
ExplodyCthing.prototype.cleanup = function () {
    this.onDone()
};
ExplodyCthing.prototype.update = function (a, d) {
    var c, b;
    this.y = this.worldy;
    c = a + this.viewwidth;
    b = -1;
    c > this.worldwidth && (b = c - this.worldwidth - 1);
    this.x = -1 === b ? this.worldx - a : this.worldx <= b ? this.worldwidth - a + this.worldx : this.worldx - a;
    this.particlesystem.moveEmitter(this.emittername, this.x, this.y)
};
ExplodyCthing.prototype.everySecond = function (a) {
};
