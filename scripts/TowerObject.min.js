function TowerObject(a, b, c, d, e, f, g, m, h, k) {
    var l;
    this.stage = a;
    this.particlesystem = b;
    this.recentx = 0;
    b = new PARTSYS.Field(h, k, c, d);
    b.onFieldInfluenced = this.applyGravity.bind(this);
    a = new PARTSYS.Emitter;
    a.x = h + 20;
    a.y = k + 15;
    a.area = {xanchor: 0, yanchor: 0, width: c - 40, height: 2, radius: 0};
    a.density = {min: 5, max: 25};
    a.angle = {min: 267, max: 273};
    a.speed = {min: 0.5, max: 2.5};
    a.rotation = 0;
    a.emitterfields = [b];
    a.particlerotation = {min: -2, max: 2};
    a.lifetime = {min: 10, max: 25};
    a.bounded = {x: h, y: k - 50, width: c, height: 65, type: "die"};
    a.maxparticles =
        0;
    a.dienoparticles = !1;
    a.lockparticles = !0;
    a.onCreateParticle = this.createTractorParticle.bind(this);
    a.onUpdateParticles = this.updateParticles.bind(this);
    a.onRemoveParticle = this.removeParticle.bind(this);
    b = this.particlesystem.getEmitterNames();
    for (l = 0; ;) {
        this.emittername = "tower" + h.toString() + " " + k.toString() + l;
        if (-1 === b.indexOf(this.emittername))break;
        l += 1
    }
    this.particlesystem.addEmitter(this.emittername, a);
    GameObject.call(this, "tower_off.png", c, d, e, f, g, m, h, k)
}
TowerObject.constructor = TowerObject;
TowerObject.prototype = Object.create(GameObject.prototype);
TowerObject.prototype.cleanup = function () {
    this.particlesystem.removeEmitter(this.emittername)
};
TowerObject.prototype.applyWell = function (a, b, c, d) {
    var e = 0, f = 0, e = b - a.position.x, f = c - a.position.y;
    a = d / Math.pow(e * e + f * f, 1.5);
    return new PARTSYS.Vector(e * a, f * a)
};
TowerObject.prototype.applyGravity = function (a, b) {
    a.velocity.selfAdd(this.applyWell(a, b.x + b.width / 2, b.y + b.height / 2, 1500))
};
TowerObject.prototype.createTractorParticle = function (a) {
    var b = PIXI.Texture.fromFrame("tractoricle.png");
    a.sprite = new PIXI.Sprite(b, 32, 32);
    a.sprite.position.x = a.position.x;
    a.sprite.position.y = a.position.y;
    a.sprite.anchor.x = 0.5;
    a.sprite.anchor.y = 0.5;
    this.stage.addChild(a.sprite)
};
TowerObject.prototype.updateParticles = function (a, b) {
    var c, d, e, f, g = this.recentx;
    c = !1;
    d = g + this.viewwidth;
    e = -1;
    d > this.worldwidth && (e = d - this.worldwidth - 1);
    -1 === e ? a.x >= g - this.width && a.x <= d + this.width && (f = a.x - g, c = !0) : a.x >= g - this.width && a.x <= this.worldwidth + this.width ? (f = a.x - g, c = !0) : a.x <= e + this.width && (f = this.worldwidth - g + a.x, c = !0);
    if (c)for (c = 0; c < b.length; c++)d = b[c], d.visible = !0, d.sprite.position.x = f + (d.position.x - a.x), d.sprite.position.y = d.position.y, d.sprite.rotation = PARTSYS.degreesToRadians(d.angle);
    else for (c = 0; c < b.length; c++)b[c].visible = !1
};
TowerObject.prototype.removeParticle = function (a) {
    this.stage.removeChild(a.sprite);
    a.sprite = null
};
TowerObject.prototype.everySecond = function (a) {
};
TowerObject.prototype.update = function (a) {
    this.recentx = a;
    GameObject.prototype.update.call(this, a)
};
